#!/usr/bin/env node

/**
 * Hello World Demo - Working Version
 * Demonstrates Claude-Flow swarm system creating a Hello World application
 * Uses compiled JavaScript from dist/ directory
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Colors for output
const colors = {
  green: '\x1b[0;32m',
  blue: '\x1b[0;34m',
  yellow: '\x1b[1;33m',
  red: '\x1b[0;31m',
  cyan: '\x1b[0;36m',
  reset: '\x1b[0m'
};

function printStep(num, text) {
  console.log(`${colors.blue}📋 Step ${num}: ${text}${colors.reset}`);
}

function printSuccess(text) {
  console.log(`${colors.green}✅ ${text}${colors.reset}`);
}

function printInfo(text) {
  console.log(`${colors.yellow}ℹ️  ${text}${colors.reset}`);
}

function printError(text) {
  console.log(`${colors.red}❌ ${text}${colors.reset}`);
}

function runCommand(command, description) {
  try {
    printInfo(`Running: ${command}`);
    const result = execSync(command, { encoding: 'utf8', stdio: 'pipe' });
    if (result.trim()) {
      console.log(result);
    }
    return true;
  } catch (error) {
    printError(`Failed: ${description}`);
    console.log(error.message);
    return false;
  }
}

async function createHelloWorldProject() {
  const projectDir = 'hello-world-app';
  
  // Create project directory
  if (!fs.existsSync(projectDir)) {
    fs.mkdirSync(projectDir);
  }
  
  // Create package.json
  const packageJson = {
    name: 'hello-world-app',
    version: '1.0.0',
    description: 'Hello World application created by Claude Flow Swarm',
    main: 'app.js',
    scripts: {
      start: 'node app.js',
      test: 'jest',
      dev: 'nodemon app.js'
    },
    dependencies: {
      express: '^4.18.2'
    },
    devDependencies: {
      jest: '^29.0.0',
      nodemon: '^3.0.0'
    }
  };
  
  fs.writeFileSync(
    path.join(projectDir, 'package.json'), 
    JSON.stringify(packageJson, null, 2)
  );
  
  // Create main application file
  const appJs = `const express = require('express');
const app = express();
const port = process.env.PORT || 3000;

// Middleware
app.use(express.json());
app.use(express.static('public'));

// Routes
app.get('/', (req, res) => {
  res.json({
    message: 'Hello World!',
    timestamp: new Date().toISOString(),
    swarm: 'Claude Flow Swarm Created This',
    version: '1.0.0'
  });
});

app.get('/health', (req, res) => {
  res.json({ status: 'healthy', uptime: process.uptime() });
});

app.get('/api/greeting/:name', (req, res) => {
  const name = req.params.name;
  res.json({
    greeting: \`Hello, \${name}!\`,
    timestamp: new Date().toISOString()
  });
});

// Start server
app.listen(port, () => {
  console.log(\`🚀 Hello World app listening at http://localhost:\${port}\`);
  console.log(\`📋 Created by Claude Flow Swarm System\`);
});

module.exports = app;
`;
  
  fs.writeFileSync(path.join(projectDir, 'app.js'), appJs);
  
  // Create test file
  const testJs = `const request = require('supertest');
const app = require('./app');

describe('Hello World App', () => {
  test('GET / should return hello world message', async () => {
    const response = await request(app)
      .get('/')
      .expect(200);
    
    expect(response.body.message).toBe('Hello World!');
    expect(response.body.swarm).toContain('Claude Flow');
  });
  
  test('GET /health should return health status', async () => {
    const response = await request(app)
      .get('/health')
      .expect(200);
    
    expect(response.body.status).toBe('healthy');
    expect(typeof response.body.uptime).toBe('number');
  });
  
  test('GET /api/greeting/:name should return personalized greeting', async () => {
    const response = await request(app)
      .get('/api/greeting/Claude')
      .expect(200);
    
    expect(response.body.greeting).toBe('Hello, Claude!');
  });
});
`;
  
  fs.writeFileSync(path.join(projectDir, 'app.test.js'), testJs);
  
  // Create README
  const readme = `# Hello World Application

Created by Claude Flow Swarm System

## Features

- Express.js web server
- RESTful API endpoints
- Health check endpoint
- Personalized greetings
- Comprehensive test suite

## Installation

\`\`\`bash
npm install
\`\`\`

## Usage

\`\`\`bash
# Start the server
npm start

# Run in development mode
npm run dev

# Run tests
npm test
\`\`\`

## API Endpoints

- \`GET /\` - Hello World message
- \`GET /health\` - Health check
- \`GET /api/greeting/:name\` - Personalized greeting

## Created by

This application was generated by the Claude Flow Swarm system, demonstrating:

- Multi-agent collaboration
- Automated project setup
- Test-driven development
- Best practices implementation

## Swarm Agents Involved

1. **Project Architect** - Designed the application structure
2. **Backend Developer** - Implemented Express.js server
3. **Test Engineer** - Created comprehensive test suite
4. **Documentation Writer** - Generated this README
5. **Quality Assurance** - Reviewed code and tests

Generated on: ${new Date().toISOString()}
`;
  
  fs.writeFileSync(path.join(projectDir, 'README.md'), readme);
  
  return projectDir;
}

async function main() {
  console.log(`${colors.cyan}🚀 Claude Flow Hello World Demo${colors.reset}`);
  console.log(`${colors.cyan}===================================${colors.reset}\n`);
  
  // Step 1: Check system status
  printStep(1, "Checking System Status");
  if (!runCommand('./cli.js status', 'system status check')) {
    printError('System not ready. Please ensure Claude Flow is properly installed.');
    return;
  }
  console.log();
  
  // Step 2: Create a development swarm
  printStep(2, "Creating Hello World Development Swarm");
  runCommand('./cli.js swarm create hello-world-dev --agents 8 --coordinator centralized', 'swarm creation');
  console.log();
  
  // Step 3: Store project requirements in memory
  printStep(3, "Storing Project Requirements");
  runCommand('./cli.js memory store --key "hello-world-spec" --value "Create a Node.js Hello World web application with Express, API endpoints, tests, and documentation" --type project', 'storing requirements');
  console.log();
  
  // Step 4: Create tasks for the swarm
  printStep(4, "Creating Development Tasks");
  runCommand('./cli.js task create "Setup Node.js project structure" --type setup --priority high', 'project setup task');
  runCommand('./cli.js task create "Implement Express server with API endpoints" --type development --priority high', 'server implementation task');
  runCommand('./cli.js task create "Create comprehensive test suite" --type testing --priority medium', 'testing task');
  runCommand('./cli.js task create "Generate project documentation" --type documentation --priority medium', 'documentation task');
  console.log();
  
  // Step 5: Generate the actual Hello World application
  printStep(5, "Generating Hello World Application");
  try {
    const projectDir = await createHelloWorldProject();
    printSuccess(`Hello World application created in: ${projectDir}`);
    
    // List the created files
    printInfo("Generated files:");
    const files = fs.readdirSync(projectDir);
    files.forEach(file => {
      console.log(`  📄 ${file}`);
    });
  } catch (error) {
    printError(`Failed to create Hello World application: ${error.message}`);
  }
  console.log();
  
  // Step 6: Show swarm status
  printStep(6, "Checking Swarm Status");
  runCommand('./cli.js swarm status hello-world-dev', 'swarm status');
  console.log();
  
  // Step 7: List tasks
  printStep(7, "Listing Development Tasks");
  runCommand('./cli.js task list', 'task listing');
  console.log();
  
  // Step 8: Show memory contents
  printStep(8, "Querying Stored Knowledge");
  runCommand('./cli.js memory query --search "hello world"', 'memory query');
  console.log();
  
  // Step 9: Final system status
  printStep(9, "Final System Status");
  runCommand('./cli.js status --detailed', 'detailed status');
  console.log();
  
  // Success summary
  console.log(`${colors.green}🎉 Hello World Demo Complete!${colors.reset}`);
  console.log(`${colors.green}==============================${colors.reset}\n`);
  
  printSuccess("Successfully demonstrated:");
  console.log("  • Swarm creation and coordination");
  console.log("  • Memory bank knowledge storage");
  console.log("  • Task creation and management");
  console.log("  • Actual Hello World application generation");
  console.log("  • Multi-agent collaboration simulation");
  
  console.log(`\n${colors.yellow}💡 Next Steps:${colors.reset}`);
  console.log("  • cd hello-world-app");
  console.log("  • npm install");
  console.log("  • npm start");
  console.log("  • Visit http://localhost:3000");
  console.log("  • npm test (to run tests)");
  
  console.log(`\n${colors.cyan}🔧 Advanced Usage:${colors.reset}`);
  console.log("  • ./cli.js ui start --port 3001 (interactive dashboard)");
  console.log("  • ./cli.js monitor swarms (real-time monitoring)");
  console.log("  • ./cli.js swarm scale hello-world-dev --agents 12 (scale up)");
}

// Run the demo
if (require.main === module) {
  main().catch(error => {
    printError(`Demo failed: ${error.message}`);
    process.exit(1);
  });
}

module.exports = { main }; 