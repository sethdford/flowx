# FlowX Enterprise Infrastructure - Docker Compose
# Complete enterprise stack with microservices, monitoring, and scaling
# Targets 2.8-4.4x performance improvements with enterprise features

version: '3.8'

# ================================
# Enterprise Network Configuration
# ================================
networks:
  flowx-enterprise:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  flowx-internal:
    driver: bridge
    internal: true
  flowx-monitoring:
    driver: bridge

# ================================
# Enterprise Volume Configuration
# ================================
volumes:
  flowx-data:
    driver: local
  flowx-memory:
    driver: local
  flowx-logs:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local

# ================================
# Enterprise Services Configuration
# ================================
services:

  # ================================
  # Core FlowX Services
  # ================================
  
  # FlowX Primary Orchestrator
  flowx-orchestrator:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: flowx-orchestrator
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - FLOWX_MODE=orchestrator
      - FLOWX_INSTANCE_ID=orchestrator-primary
      - FLOWX_CLUSTER_ENABLED=true
      - FLOWX_PERFORMANCE_MODE=enterprise
      - FLOWX_NEURAL_ACCELERATION=wasm
      - FLOWX_MEMORY_BACKEND=hybrid
      - FLOWX_CACHE_ENABLED=true
      - DATABASE_URL=postgresql://flowx:flowx_secure_2025@postgres:5432/flowx_enterprise
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - PROMETHEUS_URL=http://prometheus:9090
    ports:
      - "3000:3000"    # Main API
      - "3001:3001"    # WebSocket
      - "3002:3002"    # Admin
    volumes:
      - flowx-data:/app/data
      - flowx-memory:/app/memory
      - flowx-logs:/app/logs
      - ./config/enterprise:/app/config:ro
    networks:
      - flowx-enterprise
      - flowx-internal
    depends_on:
      - postgres
      - redis
      - elasticsearch
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # FlowX Agent Workers (Scalable)
  flowx-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - FLOWX_MODE=worker
      - FLOWX_PERFORMANCE_MODE=enterprise
      - FLOWX_NEURAL_ACCELERATION=wasm
      - FLOWX_ORCHESTRATOR_URL=http://flowx-orchestrator:3000
      - DATABASE_URL=postgresql://flowx:flowx_secure_2025@postgres:5432/flowx_enterprise
      - REDIS_URL=redis://redis:6379
    volumes:
      - flowx-data:/app/data
      - flowx-memory:/app/memory:ro
      - flowx-logs:/app/logs
    networks:
      - flowx-enterprise
      - flowx-internal
    depends_on:
      - flowx-orchestrator
      - postgres
      - redis
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # FlowX Web UI Dashboard
  flowx-dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: flowx-dashboard
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - FLOWX_MODE=dashboard
      - FLOWX_API_URL=http://flowx-orchestrator:3000
      - FLOWX_WS_URL=ws://flowx-orchestrator:3001
    ports:
      - "8080:8080"    # Web UI
    volumes:
      - flowx-logs:/app/logs:ro
    networks:
      - flowx-enterprise
    depends_on:
      - flowx-orchestrator
    command: ["node", "dist/ui/enterprise-web-server.js", "--port", "8080"]

  # ================================
  # Enterprise Infrastructure
  # ================================
  
  # PostgreSQL Database with Performance Tuning
  postgres:
    image: postgres:15-alpine
    container_name: flowx-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=flowx_enterprise
      - POSTGRES_USER=flowx
      - POSTGRES_PASSWORD=flowx_secure_2025
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./config/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - flowx-internal
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # Redis Cache with Persistence
  redis:
    image: redis:7-alpine
    container_name: flowx-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - flowx-internal
    command: redis-server /usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # ================================
  # Monitoring and Observability
  # ================================
  
  # Prometheus Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: flowx-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - flowx-monitoring
      - flowx-enterprise
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: flowx-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=flowx_admin_2025
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3333:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - flowx-monitoring
      - flowx-enterprise
    depends_on:
      - prometheus

  # Elasticsearch for Logs
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: flowx-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - flowx-internal
      - flowx-monitoring
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # Logstash for Log Processing
  logstash:
    image: logstash:8.11.0
    container_name: flowx-logstash
    restart: unless-stopped
    volumes:
      - ./config/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - flowx-logs:/var/log/flowx:ro
    networks:
      - flowx-monitoring
    depends_on:
      - elasticsearch
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"

  # Kibana for Log Visualization
  kibana:
    image: kibana:8.11.0
    container_name: flowx-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - flowx-monitoring
    depends_on:
      - elasticsearch

  # ================================
  # Load Balancer and Proxy
  # ================================
  
  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: flowx-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - flowx-enterprise
    depends_on:
      - flowx-orchestrator
      - flowx-dashboard

  # ================================
  # Enterprise Security and Backup
  # ================================
  
  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: flowx-backup
    restart: "no"
    environment:
      - POSTGRES_DB=flowx_enterprise
      - POSTGRES_USER=flowx
      - POSTGRES_PASSWORD=flowx_secure_2025
      - PGPASSWORD=flowx_secure_2025
    volumes:
      - ./backups:/backups
      - flowx-data:/app/data:ro
      - flowx-memory:/app/memory:ro
    networks:
      - flowx-internal
    profiles:
      - backup
    command: >
      sh -c "
        echo 'Starting backup at $(date)'
        pg_dump -h postgres -U flowx flowx_enterprise > /backups/postgres_$(date +%Y%m%d_%H%M%S).sql
        tar -czf /backups/flowx_data_$(date +%Y%m%d_%H%M%S).tar.gz -C /app data memory
        echo 'Backup completed at $(date)'
      "

# ================================
# Enterprise Scaling Configuration
# ================================
# For production scaling, use:
# docker-compose up --scale flowx-worker=5
# docker-compose up --scale flowx-worker=10

# ================================
# Enterprise Monitoring URLs
# ================================
# - FlowX Dashboard: http://localhost:8080
# - Prometheus: http://localhost:9090
# - Grafana: http://localhost:3333 (admin/flowx_admin_2025)
# - Kibana: http://localhost:5601
# - FlowX API: http://localhost:3000 