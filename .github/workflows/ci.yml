name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'

jobs:
  # Code quality and security checks
  security:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Lint code
        run: npm run lint

      - name: Format check
        run: npm run format -- --check

      - name: Type check
        run: npm run typecheck

  # Unit, integration, and e2e tests
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['18', '20']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create test directories
        run: |
          mkdir -p test-results/coverage
          mkdir -p test-results/reports

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests  
        run: npm run test:integration

      - name: Run end-to-end tests
        run: npm run test:e2e

      - name: Run full test suite with coverage
        run: npm run test:ci

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '18'
        uses: codecov/codecov-action@v4
        with:
          directory: ./test-results/coverage
          flags: unit,integration,e2e
          name: flowx-coverage-${{ matrix.os }}-node${{ matrix.node-version }}
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}
          path: |
            test-results/
            junit.xml
          retention-days: 7

  # Build and package verification
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [security, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Verify TypeScript compilation
        run: npm run build:ts

      - name: Test package installation
        run: |
          npm pack
          npm install -g ./claude-code-flow-*.tgz
          which flowx

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            bin/
            *.tgz
          retention-days: 7

  # Benchmark performance tests
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run benchmarks
        run: |
          npm run benchmark
          npm run benchmark:test

      - name: Archive benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: |
            benchmark/reports/
            benchmark/test-output/
          retention-days: 30

  # Deployment (only on main branch)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [security, test, build, benchmark]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build

      - name: Run final tests
        run: npm run test:ci

      - name: Prepare for publish
        run: npm run prepare-publish

      - name: Check if version changed
        id: version-check
        run: |
          CURRENT_VERSION=$(npm view claude-code-flow version || echo "0.0.0")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          if [ "$CURRENT_VERSION" != "$PACKAGE_VERSION" ]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "New version detected: $PACKAGE_VERSION (current: $CURRENT_VERSION)"
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
            echo "No version change detected"
          fi

      - name: Publish to NPM
        if: steps.version-check.outputs.should_publish == 'true'
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.version-check.outputs.should_publish == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version-check.outputs.package_version }}
          release_name: FlowX v${{ steps.version-check.outputs.package_version }}
          draft: false
          prerelease: false

  # Notification on success/failure
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [security, test, build]
    if: always()
    
    steps:
      - name: Notify on success
        if: ${{ needs.security.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success' }}
        run: echo "✅ All CI/CD pipeline steps completed successfully!"

      - name: Notify on failure  
        if: ${{ needs.security.result == 'failure' || needs.test.result == 'failure' || needs.build.result == 'failure' }}
        run: |
          echo "❌ CI/CD pipeline failed!"
          echo "Security: ${{ needs.security.result }}"
          echo "Tests: ${{ needs.test.result }}" 
          echo "Build: ${{ needs.build.result }}"
          exit 1
